# 7/2/2025
Goal is to make something that can solve and/or create Kami puzzles. (The iOS game.)

It's clear that the puzzles are topological / color based.

Essentially every stage is a graph of what colors touch what, and you can fill with colors.

I'm not sure if I want the graphs to auto-reduce yet.

Let's build a very simple solver for the time being.

Each puzzle is a graph. Each node has a number and a color.

It's working, but not finding the optimal solution yet.
Need to find out why.

With fuzzy:
All graphs: 100%|██████████████████████████████████████████████████████████████████| 32768/32768 [17:31<00:00, 31.18graphs/s]
Elapsed time: 1067.092232 seconds
Hardest 6-node puzzle with 2 colors uses 3 moves
Node 0: Color ORANGE, Neighbors [3, 5]
Node 1: Color DARK_BLUE, Neighbors [2, 4]
Node 2: Color ORANGE, Neighbors [1, 3]
Node 3: Color DARK_BLUE, Neighbors [0, 2]
Node 4: Color ORANGE, Neighbors [1]
Node 5: Color DARK_BLUE, Neighbors [0]
1. Set node 0 to DARK_BLUE
2. Set node 0 to ORANGE
3. Set node 1 to ORANGE

Without fuzzy:
All graphs: 100%|██████████████████████████████████████████████████████████████████| 32768/32768 [12:05<00:00, 45.14graphs/s] 
Elapsed time: 725.972283 seconds
Hardest 6-node puzzle with 2 colors uses 3 moves
Node 0: Color ORANGE, Neighbors [3, 5]
Node 1: Color DARK_BLUE, Neighbors [2, 4]
Node 2: Color ORANGE, Neighbors [1, 3]
Node 3: Color DARK_BLUE, Neighbors [0, 2]
Node 4: Color ORANGE, Neighbors [1]
Node 5: Color DARK_BLUE, Neighbors [0]
1. Set node 0 to DARK_BLUE
2. Set node 0 to ORANGE
3. Set node 1 to ORANGE

So hashing actually makes it slower because the hashing process is so slow.
That's super ironic.

It's estimating 1.5-2h with fuzzy for N=5, K=5.
How about without fuzzy?
Looks like similar timing.


I have a hunch that it's all the collapsing that's taking forever.
I'm going to not collapse again if nothing has been modified.
Hashing by definition collapses.

I added in trackers to ensure that it doesn't accidentally do something it has already done.

Searching for hardest 5-node puzzle with 5 colors...
FUZZY=False
All graphs:   6%|████                                                                | 61/1024 [04:14<2:35:04,  9.66s/graphs]

Doesn't seem to be much faster for the non-hashing version.
Which means that there wasn't that much re-collapsing going on without hashing.
Going to see if it speeds it up for the hashing version.

Searching for hardest 5-node puzzle with 5 colors...
FUZZY=True
All graphs:  22%|███████████████▎                                                     | 228/1024 [00:21<02:14,  5.91graphs/s]

Um, yeah. I'd say that's a speedup.

Searching for hardest 5-node puzzle with 5 colors...
FUZZY=True
All graphs: 100%|████████████████████████████████████████████████████████████████████| 1024/1024 [02:09<00:00,  7.90graphs/s]
Elapsed time: 129.653509 seconds
Hardest 5-node puzzle with 5 colors uses 3 moves
Node 0: Color ORANGE, Neighbors [1, 2, 3, 4]
Node 1: Color ORANGE, Neighbors [0]
Node 2: Color DARK_BLUE, Neighbors [0]
Node 3: Color CREAM, Neighbors [0]
Node 4: Color TURQUOISE, Neighbors [0]
1. Set node 0 to TURQUOISE
2. Set node 0 to DARK_BLUE
3. Set node 0 to CREAM

Yeah, that's a lot better, wow.

# 7/10/2025
A* is a great speedup:
Solving puzzle using breadth first search...
Depth 0: 100%|██████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 13.88it/s]
Depth 1: 100%|████████████████████████████████████████████████████████████████████| 31/31 [00:04<00:00,  7.33it/s] 
Depth 2: 100%|██████████████████████████████████████████████████████████████████| 427/427 [00:48<00:00,  8.83it/s] 
Depth 3:  37%|███████████████████████▍                                        | 1244/3388 [03:02<05:13,  6.83it/s] 
Solution found in 234.9412288000167 seconds:
1. Set ALL_STRIPE_3 to RED
2. Set LEFT_STRIPE_4 to RED
3. Set LEFT_STRIPE_2 to DARK_BLUE
4. Set ALL_STRIPE_1 to CREAM
Total moves: 4
Solving puzzle using A* search...
Solution found in 56.08667830002378 seconds:
1. Set LEFT_STRIPE_4 to CREAM
2. Set ALL_STRIPE_3 to RED
3. Set LEFT_STRIPE_2 to DARK_BLUE
4. Set ALL_STRIPE_1 to CREAM
Total moves: 4

That's just with the color heuristic.

Using a_star_heuristics=[<HeuristicName.COLOR: 'color'>, <HeuristicName.MAX_EDGE_REDUCTION: 'max edge reduction'>]
Solution found in 4.623849900002824 seconds:
1. Set ALL_STRIPE_3 to RED
2. Set LEFT_STRIPE_4 to RED
3. Set LEFT_STRIPE_2 to DARK_BLUE
4. Set ALL_STRIPE_1 to CREAM

Okay, that's a ridiculous speedup, wow.


On those solves it seems to be a lot faster.
However, on the creator, it seems to be slower, oddly.
Maybe I should just use the color?

Searching for hardest 5-node puzzle with 5 colors...
FUZZY=True
All graphs: 100%|█████████████████████████████████████████████████████████| 1024/1024 [06:28<00:00,  2.64graphs/s]
Elapsed time: 388.555862 seconds
Hardest 5-node puzzle with 5 colors uses 4 moves
Node 0: Color ORANGE, Neighbors [1, 2, 3, 4]
Node 1: Color DARK_BLUE, Neighbors [0]
Node 2: Color CREAM, Neighbors [0]
Node 3: Color TURQUOISE, Neighbors [0]
Node 4: Color RED, Neighbors [0]
1. Set node 0 to DARK_BLUE
2. Set node 2 to TURQUOISE
3. Set node 4 to TURQUOISE
4. Set node 0 to TURQUOISE

That was with both heuristics. I'm going to try BFS and see what happens.

Yeah, I have no idea what I did to make that run so fast before. Because BFS is now running even slower than that.

BFS now looks like this:
Searching for hardest 5-node puzzle with 5 colors...
FUZZY=True
All graphs: 100%|██████████████████████████████████████████████████████████| 1024/1024 [06:50<00:00,  2.50graph/s]
Elapsed time: 410.320283 seconds
Hardest 5-node puzzle with 5 colors uses 4 moves
Node 0: Color ORANGE, Neighbors [1, 2, 3, 4]
Node 1: Color DARK_BLUE, Neighbors [0]
Node 2: Color CREAM, Neighbors [0]
Node 3: Color TURQUOISE, Neighbors [0]
Node 4: Color RED, Neighbors [0]
1. Set node 0 to RED
2. Set node 0 to CREAM
3. Set node 0 to DARK_BLUE
4. Set node 0 to TURQUOISE

I will say, it's not using the same HashTracker for all of them.
I might get the speedup from that.

This is with just the color heuristic:
Searching for hardest 5-node puzzle with 5 colors...
FUZZY=True
All graphs: 100%|██████████████████████████████████████████████████████████| 1024/1024 [06:45<00:00,  2.53graph/s]
Elapsed time: 405.351829 seconds
Hardest 5-node puzzle with 5 colors uses 4 moves
Node 0: Color ORANGE, Neighbors [1, 2, 3, 4]
Node 1: Color DARK_BLUE, Neighbors [0]
Node 2: Color CREAM, Neighbors [0]
Node 3: Color TURQUOISE, Neighbors [0]
Node 4: Color RED, Neighbors [0]
1. Set node 0 to CREAM
2. Set node 1 to TURQUOISE
3. Set node 4 to TURQUOISE
4. Set node 0 to TURQUOISE

Yeah, because previously switching to fuzzy hashing seemed to do the trick.
So something with hashing was good.

Oh! It looks like copies were rehashing. I changed the base class's `copy` function to work properly, but `SolvablePuzzle.copy` overrides `Puzzle.copy` and doesn't do it right.

Okay, fixed it. Let's try BFS again.
I may want to make the hasher the same between them all if I haven't already if this doesn't go well.

Okay, BFS now runs like this:
Searching for hardest 5-node puzzle with 5 colors...
FUZZY=True
All graphs: 100%|██████████████████████████████████████████████████████████| 1024/1024 [06:47<00:00,  2.51graph/s]
Elapsed time: 407.789244 seconds
Hardest 5-node puzzle with 5 colors uses 4 moves
Node 0: Color ORANGE, Neighbors [1, 2, 3, 4]
Node 1: Color DARK_BLUE, Neighbors [0]
Node 2: Color CREAM, Neighbors [0]
Node 3: Color TURQUOISE, Neighbors [0]
Node 4: Color RED, Neighbors [0]
1. Set node 0 to RED
2. Set node 0 to DARK_BLUE
3. Set node 0 to CREAM
4. Set node 0 to TURQUOISE

Basically the same time as before, so that wasn't the issue.

With all of them using the same hasher:
Searching for hardest 5-node puzzle with 5 colors...
FUZZY=True
All graphs: 100%|██████████████████████████████████████████████████████████| 1024/1024 [06:52<00:00,  2.48graph/s]
Elapsed time: 412.275630 seconds
Hardest 5-node puzzle with 5 colors uses 4 moves
Node 0: Color ORANGE, Neighbors [1, 2, 3, 4]
Node 1: Color DARK_BLUE, Neighbors [0]
Node 2: Color CREAM, Neighbors [0]
Node 3: Color TURQUOISE, Neighbors [0]
Node 4: Color RED, Neighbors [0]
1. Set node 0 to CREAM
2. Set node 0 to TURQUOISE
3. Set node 0 to DARK_BLUE
4. Set node 0 to RED

That's one of the worst runs.

Oh! It went so much faster because I was actually only using 4 colors.
So it actually ended up with the incorrect answer and took a much shorter time.

So I should compare to 5 nodes 4 colors now.

I'm gonna do just max edge heuristic and see how it goes.

Okay, the time I was trying to beat was Elapsed time: 129.653509 seconds

I got:
Elapsed time: 123.693212 seconds
Hardest 5-node puzzle with 4 colors uses 3 moves
Node 0: Color ORANGE, Neighbors [1, 2, 3, 4]
Node 1: Color ORANGE, Neighbors [0]
Node 2: Color DARK_BLUE, Neighbors [0]
Node 3: Color CREAM, Neighbors [0]
Node 4: Color TURQUOISE, Neighbors [0]
1. Set node 0 to TURQUOISE
2. Set node 2 to CREAM
3. Set node 0 to CREAM
PS C:\Users\happy\Desktop\PythonPro

Nice! Let's try both heuristics.

All graphs: 100%|██████████████████████████████████████████████████████████| 1024/1024 [02:09<00:00,  7.90graph/s]
Elapsed time: 129.678219 seconds
Hardest 5-node puzzle with 4 colors uses 3 moves
Node 0: Color ORANGE, Neighbors [1, 2, 3, 4]
Node 1: Color ORANGE, Neighbors [0]
Node 2: Color DARK_BLUE, Neighbors [0]
Node 3: Color CREAM, Neighbors [0]
Node 4: Color TURQUOISE, Neighbors [0]
1. Set node 0 to TURQUOISE
2. Set node 2 to CREAM
3. Set node 0 to CREAM

Okay, so that took a little longer than the target time.

So then let's just do color.

Searching for hardest 5-node puzzle with 4 colors...
FUZZY=True
All graphs: 100%|██████████████████████████████████████████████████████████| 1024/1024 [02:12<00:00,  7.72graph/s]
Elapsed time: 132.709575 seconds
Hardest 5-node puzzle with 4 colors uses 3 moves
Node 0: Color ORANGE, Neighbors [1, 2, 3, 4]
Node 1: Color ORANGE, Neighbors [0]
Node 2: Color DARK_BLUE, Neighbors [0]
Node 3: Color CREAM, Neighbors [0]
Node 4: Color TURQUOISE, Neighbors [0]
1. Set node 0 to TURQUOISE
2. Set node 2 to CREAM
3. Set node 0 to CREAM

Surprisingly it actually did the worst. Hm. Guess the gain from the other one was worth it. Surprising!
I wonder if I added in the third heuristic how it would perform.

Going to set it back to the best peforming one.